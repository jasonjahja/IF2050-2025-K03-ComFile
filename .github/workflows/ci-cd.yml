name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  JAVA_VERSION: '17'
  JAVA_DISTRIBUTION: 'temurin'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2
          lib/
        key: ${{ runner.os }}-java-${{ hashFiles('lib/**') }}
        restore-keys: |
          ${{ runner.os }}-java-
    
    - name: Compile application
      run: |
        mkdir -p out/production
        javac -cp "lib/*" -d out/production $(find src -name "*.java")
    
    - name: Run tests
      run: |
        mkdir -p out/test
        # Compile tests
        javac -cp "lib/*:out/production" -d out/test $(find test -name "*.java")
        # Run tests (assuming TestRunner as main test class)
        java -cp "lib/*:out/production:out/test" TestRunner
    
    - name: Generate test report
      if: always()
      run: |
        echo "Test execution completed"
        # Add test reporting here if you have test frameworks

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: ${{ env.JAVA_DISTRIBUTION }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.m2
          lib/
        key: ${{ runner.os }}-java-${{ hashFiles('lib/**') }}
        restore-keys: |
          ${{ runner.os }}-java-
    
    - name: Compile application
      run: |
        mkdir -p out/production
        javac -cp "lib/*" -d out/production $(find src -name "*.java")
    
    - name: Create JAR file
      run: |
        mkdir -p dist
        # Create manifest file
        echo "Main-Class: MainApplication" > manifest.txt
        echo "Class-Path: lib/postgresql-42.7.2.jar" >> manifest.txt
        # Create JAR with dependencies
        jar cfm dist/document-management-system.jar manifest.txt -C out/production . -C . lib/
    
    - name: Upload JAR artifact
      uses: actions/upload-artifact@v4
      with:
        name: document-management-system-jar
        path: dist/document-management-system.jar
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-report.sarif'
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'document-management-system'
        path: '.'
        format: 'HTML'
        out: 'reports'
      continue-on-error: true
    
    - name: Upload dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: dependency-check-report
        path: reports/
        retention-days: 30

  release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [test, build, security-scan]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download JAR artifact
      uses: actions/download-artifact@v4
      with:
        name: document-management-system-jar
        path: dist/
    
    - name: Get version
      id: version
      run: |
        VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::7}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: Release v${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          - Document Management System Release
          - Built from commit: ${{ github.sha }}
          
          ## Installation
          1. Download the JAR file
          2. Ensure Java 17+ is installed
          3. Run: `java -jar document-management-system.jar`
          
          ## Requirements
          - Java 17 or higher
          - PostgreSQL database (for full functionality)
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/document-management-system.jar
        asset_name: document-management-system.jar
        asset_content_type: application/java-archive 